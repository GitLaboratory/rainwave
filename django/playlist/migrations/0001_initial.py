# Generated by Django 3.0.2 on 2020-02-05 08:25

from django.conf import settings
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import playlist.base_classes.group_blocks_elections


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('misc', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Album',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=1024)),
                ('name_searchable', models.CharField(max_length=1024)),
                ('year', models.SmallIntegerField(blank=True, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Artist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1024)),
                ('name_searchable', models.CharField(max_length=1024)),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1024)),
                ('name_searchable', models.CharField(max_length=1024)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Song',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_on_cooldown', models.BooleanField(db_index=True, default=False)),
                ('cooldown_ends_at', models.DateTimeField(auto_now_add=True)),
                ('cooldown_multiplier', models.FloatField(default=1)),
                ('cooldown_override', models.IntegerField(blank=True, null=True)),
                ('played_last', models.DateTimeField(auto_now_add=True)),
                ('is_on_request_only', models.BooleanField(db_index=True, default=False)),
                ('request_only_end', models.DateTimeField(auto_now_add=True)),
                ('last_seen', models.DateTimeField(blank=True, null=True)),
                ('last_played', models.DateTimeField(blank=True, null=True)),
                ('vote_count', models.IntegerField(default=0)),
                ('vote_share', models.FloatField(blank=True, null=True)),
                ('votes_seen', models.IntegerField(default=0)),
                ('enabled', models.BooleanField(db_index=True, default=True)),
                ('added_on', models.DateTimeField(auto_now_add=True)),
                ('artist_json', django.contrib.postgres.fields.jsonb.JSONField(default=list)),
                ('fave_count', models.IntegerField(default=0)),
                ('file_mtime', models.IntegerField()),
                ('filename', models.TextField()),
                ('rating', models.FloatField(blank=True, db_index=True, null=True)),
                ('rating_count', models.IntegerField(db_index=True, default=0)),
                ('request_count', models.IntegerField(default=0)),
                ('request_only', models.BooleanField(default=False)),
                ('scanned', models.BooleanField(default=True)),
                ('disc_number', models.SmallIntegerField(blank=True, null=True)),
                ('length', models.SmallIntegerField()),
                ('link_text', models.TextField(blank=True, null=True)),
                ('replay_gain', models.TextField(blank=True, null=True)),
                ('name', models.TextField()),
                ('name_searchable', models.TextField()),
                ('track_number', models.SmallIntegerField(blank=True, null=True)),
                ('url', models.TextField(blank=True, null=True)),
                ('year', models.SmallIntegerField(blank=True, null=True)),
                ('album', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='playlist.Album')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SongToGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_tag', models.BooleanField(default=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='playlist.Group')),
                ('song', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='playlist.Song')),
            ],
            options={
                'unique_together': {('group', 'song')},
            },
        ),
        migrations.CreateModel(
            name='SongToArtist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.SmallIntegerField(default=0)),
                ('is_tag', models.BooleanField(default=True)),
                ('artist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='playlist.Artist')),
                ('song', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='playlist.Song')),
            ],
            options={
                'unique_together': {('artist', 'song')},
            },
        ),
        migrations.AddField(
            model_name='song',
            name='artists',
            field=models.ManyToManyField(through='playlist.SongToArtist', to='playlist.Artist'),
        ),
        migrations.AddField(
            model_name='song',
            name='groups',
            field=models.ManyToManyField(through='playlist.SongToGroup', to='playlist.Group'),
        ),
        migrations.AddField(
            model_name='song',
            name='origin_station',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='misc.Station'),
        ),
        migrations.CreateModel(
            name='GroupOnStation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(db_index=True, default=True)),
                ('visible', models.BooleanField(default=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='playlist.Group')),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='misc.Station')),
            ],
            options={
                'abstract': False,
            },
            bases=(models.Model, playlist.base_classes.group_blocks_elections.GroupBlocksElections),
        ),
        migrations.CreateModel(
            name='UserSongRating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.FloatField()),
                ('when', models.DateTimeField(auto_now_add=True)),
                ('song', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='playlist.Song')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'song')},
                'index_together': {('user', 'song')},
            },
        ),
        migrations.CreateModel(
            name='UserSongFave',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fave', models.BooleanField()),
                ('song', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='playlist.Song')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'song')},
                'index_together': {('user', 'song')},
            },
        ),
        migrations.CreateModel(
            name='UserAlbumRating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('complete', models.BooleanField(default=False)),
                ('rating', models.FloatField()),
                ('album', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='playlist.Album')),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='misc.Station')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'index_together': {('album', 'station'), ('album', 'user', 'station')},
            },
        ),
        migrations.CreateModel(
            name='UserAlbumFave',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fave', models.BooleanField(default=False)),
                ('album', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='playlist.Album')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'index_together': {('album', 'user')},
            },
        ),
        migrations.CreateModel(
            name='SongOnStation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(db_index=True, default=True)),
                ('is_on_cooldown', models.BooleanField(db_index=True, default=False)),
                ('cooldown_ends_at', models.DateTimeField(auto_now_add=True)),
                ('cooldown_multiplier', models.FloatField(default=1)),
                ('cooldown_override', models.IntegerField(blank=True, null=True)),
                ('played_last', models.DateTimeField(auto_now_add=True)),
                ('is_on_request_only', models.BooleanField(db_index=True, default=False)),
                ('request_only_end', models.DateTimeField(auto_now_add=True)),
                ('last_seen', models.DateTimeField(blank=True, null=True)),
                ('last_played', models.DateTimeField(blank=True, null=True)),
                ('electable', models.BooleanField(db_index=True, default=True)),
                ('electable_blocked_by', models.CharField(blank=True, max_length=64, null=True)),
                ('electable_blocked_for', models.SmallIntegerField(default=0)),
                ('song', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='playlist.Song')),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='misc.Station')),
            ],
            options={
                'unique_together': {('song', 'station')},
                'index_together': {('song', 'station')},
            },
        ),
        migrations.CreateModel(
            name='AlbumOnStation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(db_index=True, default=True)),
                ('is_on_cooldown', models.BooleanField(db_index=True, default=False)),
                ('cooldown_ends_at', models.DateTimeField(auto_now_add=True)),
                ('cooldown_multiplier', models.FloatField(default=1)),
                ('cooldown_override', models.IntegerField(blank=True, null=True)),
                ('played_last', models.DateTimeField(auto_now_add=True)),
                ('is_on_request_only', models.BooleanField(db_index=True, default=False)),
                ('request_only_end', models.DateTimeField(auto_now_add=True)),
                ('last_seen', models.DateTimeField(blank=True, null=True)),
                ('last_played', models.DateTimeField(blank=True, null=True)),
                ('rating', models.FloatField(db_index=True, default=0)),
                ('rating_count', models.IntegerField(db_index=True, default=0)),
                ('request_count', models.IntegerField(default=0)),
                ('requests_pending', models.BooleanField(db_index=True, default=False)),
                ('fave_count', models.IntegerField(default=0)),
                ('newest_song_added_on', models.DateTimeField(auto_now_add=True)),
                ('album', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='playlist.Album')),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='misc.Station')),
            ],
            options={
                'unique_together': {('album', 'station')},
                'index_together': {('enabled', 'station'), ('album', 'station')},
            },
            bases=(models.Model, playlist.base_classes.group_blocks_elections.GroupBlocksElections),
        ),
    ]
