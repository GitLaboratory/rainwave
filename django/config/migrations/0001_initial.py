# Generated by Django 3.0.2 on 2020-02-06 01:54

import config.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Station',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
                ('is_default', models.BooleanField(default=False, help_text='If true, this is the station that shows up for people first visiting your site.')),
                ('position', models.SmallIntegerField(default=0, help_text='What position in the menu this station sits at in the station menu.')),
                ('hostname', models.CharField(help_text='Domain/subdomain for this station.  Useful if you have more than 1 station.If you only have 1 station, set this to your primary domain name.', max_length=1024)),
                ('primary_relay_hostname', models.CharField(help_text="Domain name that has address records for all your Icecast servers.If you only have 1 Icecast server, put it here.If you don't understand, put your primary Icecast server here.", max_length=1024)),
                ('primary_relay_port', models.SmallIntegerField(default=80)),
                ('icecast_mount_name', models.CharField(help_text="e.g. If your audio is at http://icecast/station.mp3, enter 'station' here. This is your 'mount' option in Icecast/LiquidSoap minus .mp3.", max_length=1024)),
                ('planned_elections', models.SmallIntegerField(default=2, help_text='Default number of elections to plan and display on the site at once.')),
                ('default_songs_in_election', models.SmallIntegerField(default=3, help_text='Default number of songs in an election.')),
                ('request_interval', models.SmallIntegerField(default=1, help_text='Default number of random-song-only elections to put in between elections with requests.')),
                ('events_to_next_request', models.SmallIntegerField(default=0, help_text='Used to keep track of when to allow requests to be used.')),
                ('request_sequence_scale', models.SmallIntegerField(default=5, help_text='How many users in the request line until we start increasing sequential elections with requests?')),
                ('request_tunein_timeout', models.IntegerField(default=600, help_text='How long after a user tunes out until they lose their place in the request line?')),
                ('request_numsong_timeout', models.SmallIntegerField(default=2, help_text='How many songs can a user sit at the head of the request line without a song before losing their place?')),
                ('song_lookup_length_delta', models.IntegerField(default=30, help_text='Elections first try to find songs of similar length - this defines how similar, in seconds.')),
                ('cooldown_percentage', models.FloatField(default=0.6)),
                ('cooldown_highest_rating_multiplier', models.FloatField(default=0.6)),
                ('cooldown_size_min_multiplier', models.FloatField(default=0.4)),
                ('cooldown_size_max_multiplier', models.FloatField(default=1.0)),
                ('cooldown_size_slope', models.FloatField(default=0.1)),
                ('cooldown_size_slope_start', models.FloatField(default=20)),
                ('cooldown_song_min_multiplier', models.FloatField(default=0.3)),
                ('cooldown_song_max_multiplier', models.FloatField(default=3.3)),
                ('cooldown_request_only_period', models.IntegerField(default=1800)),
                ('stream_suffix', models.CharField(blank=True, help_text='Suffix to add to song titles when using LiquidSoap.', max_length=1024, null=True)),
                ('tunein_partner_key', models.CharField(blank=True, help_text='Use if you have an entry on TuneIn.com that you want updated', max_length=1024, null=True)),
                ('tunein_partner_id', models.IntegerField(blank=True, null=True)),
                ('tunein_id', models.IntegerField(blank=True, null=True)),
                ('liquidsoap_socket_path', models.CharField(blank=True, help_text='Allows you to control LiquidSoap from /admin/dj (e.g. skip song) and allows for DJs.', max_length=1024, null=True)),
                ('liquidsoap_harbor_host', models.CharField(blank=True, max_length=1024, null=True)),
                ('liquidsoap_harbor_port', models.IntegerField(blank=True, null=True)),
                ('liquidsoap_harbor_mount', models.CharField(blank=True, max_length=1024, null=True)),
                ('trim_events_after', models.DurationField(default=config.models.default_history_trim)),
                ('trim_song_history_after', models.DurationField(default=config.models.default_history_trim)),
            ],
            options={
                'ordering': ['position', 'id'],
            },
        ),
        migrations.CreateModel(
            name='Relay',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('admin_password', models.CharField(max_length=1024)),
                ('admin_username', models.CharField(max_length=1024)),
                ('hostname', models.CharField(max_length=1024)),
                ('ip_address', models.CharField(max_length=256)),
                ('listclients_url', models.CharField(default='/admin/listclients', max_length=1024)),
                ('port', models.SmallIntegerField()),
                ('protocol', models.CharField(choices=[('http://', 'http://'), ('https://', 'https://')], max_length=64)),
                ('stations', models.ManyToManyField(to='config.Station')),
            ],
        ),
        migrations.CreateModel(
            name='MusicDirectory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(max_length=1024)),
                ('primary_station', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='primary_directory', to='config.Station')),
                ('stations', models.ManyToManyField(to='config.Station')),
            ],
        ),
    ]
